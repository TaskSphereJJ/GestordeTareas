@model IEnumerable<GestordeTaras.EN.Tarea>
@using Microsoft.AspNetCore.Components

@{
    ViewData["Title"] = "Index";
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
}

@* este sera el header lo del encabezado *@
  <header class="task-header flex justify-between items-center">
        <nav class="task-nav">
            <span>|</span>
              <!-- Botón para ver comentarios fuera del foreach -->
    <a href="@Url.Action("Index", "Comment", new { idProyecto = ViewBag.ProyectoId })" class="task-nav-link">
        Ver Foro
    </a>
            <span>|</span>
            <a href="/integrantes" class="task-nav-link">Integrantes del grupo</a>
                <span>|</span>
            <button id="toggleViewButton" onclick="toggleView()" class="task-nav-link">Cambiar a drag and drop</button>
        </nav>
    </header>


<div class="task-container">
  
    <!-- Main Content -->
    <main class="task-main">
        <div id="alertContainer" class="fixed bottom-4 right-4 z-50">
            @if (TempData["SuccessMessage"] != null)
            {
                <div role="alert"
                    class="bg-green-100 dark:bg-green-900 border-l-4 border-green-500 dark:border-green-700 text-green-900 dark:text-green-100 p-2 rounded-lg flex items-center transition duration-300 ease-in-out hover:bg-green-200 dark:hover:bg-green-800 transform hover:scale-105">
                    <svg stroke="currentColor" viewBox="0 0 24 24" fill="none"
                        class="h-6 w-6 flex-shrink-0 mr-3 text-green-600" xmlns="http://www.w3.org/2000/svg">
                        <path d="M13 16h-1v-4h1m0-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" stroke-width="2"
                            stroke-linejoin="round" stroke-linecap="round"></path>
                    </svg>
                    <p class="text-sm font-semibold">@TempData["SuccessMessage"]</p>
                </div>
            }

            else if (TempData["ErrorMessage"] != null)
            {
                <div role="alert"
                    class="bg-red-100 dark:bg-red-900 border-l-4 border-red-500 dark:border-red-700 text-red-900 dark:text-red-100 p-2 rounded-lg flex items-center transition duration-300 ease-in-out hover:bg-red-200 dark:hover:bg-red-800 transform hover:scale-105">
                    <svg stroke="currentColor" viewBox="0 0 24 24" fill="none"
                        class="h-6 w-6 flex-shrink-0 mr-3 text-red-600" xmlns="http://www.w3.org/2000/svg">
                        <path d="M13 16h-1v-4h1m0-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" stroke-width="2"
                            stroke-linejoin="round" stroke-linecap="round"></path>
                    </svg>
                    <p class="text-sm font-semibold">@TempData["ErrorMessage"]</p>
                </div>
            }
        </div>

        <!-- Tabular View -->
        <div id="tabla" class="tabla flex justify-center">
            @if (Model != null && Model.Any())
            {
                <div class="relative overflow-x-auto shadow-md sm:rounded-lg mt-4">
                    <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
                        <thead class="text-base text-gray-700 uppercase bg-gray-200 dark:bg-gray-800 dark:text-gray-300">
                            <tr>
                                <th class="px-6 py-3 text-center">Nombre</th>
                                <th class="px-6 py-3 text-center">Categoría</th>
                                <th class="px-6 py-3 text-center">Prioridad</th>
                                <th class="px-6 py-3 text-center">Estado</th>
                                <th class="px-6 py-3 text-center">Fecha Vencimiento</th>
                                <th class="px-6 py-3 text-center">Acciones</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white dark:bg-gray-900">
                            @foreach (var item in Model)
                            {
                                <tr
                                    class="border-b bg-gray-50 dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-700 transition duration-300 ease-in-out">
                                    <td class="px-6 py-4 text-center">@item.Nombre</td>
                                    <td class="px-6 py-4 text-center">@item.Categoria?.Nombre</td>
                                    <td class="px-6 py-4 text-center">@item.Prioridad?.Nombre</td>
                                    <td class="px-6 py-4 text-center">@item.EstadoTarea?.Nombre</td>
                                    <td class="px-6 py-4 text-center">@item.FechaVencimiento.ToShortDateString()</td>
                                    <td class="px-6 py-4 flex justify-center items-center space-x-2">
                                        <a href="#" class="btn btn-primary btn-sm flex items-center p-2">
                                            <i class="fas fa-edit text-lg"></i>
                                        </a>
                                        <a href="#" class="btn btn-danger btn-sm flex items-center p-2">
                                            <i class="fas fa-trash-alt text-lg"></i>
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="flex flex-col items-center justify-center mt-10">
                    <img src="~/img/notask.svg" alt="No hay tareas disponibles" class="w-36 h-36 mb-4" />
                    <h1 class="text-2xl font-bold text-gray-700">No hay tareas disponibles</h1>
                    <p class="mt-2 text-gray-500">Crea una nueva tarea para comenzar a trabajar.</p>
                </div>
            }
        </div>
        <div id="tarjetas" class="hidden">
    <!-- Contenido de la vista de tarjetas -->
    <div class=" mx-auto mt-8">
        <div class="table-container overflow-y-auto h-2/5">
            <table class="w-full text-left text-sm text-gray-500 dark:text-gray-400">
                <thead class="bg-gray-100 text-base uppercase text-gray-700 dark:text-gray-300 dark:bg-gray-800">
                    <tr>
                        <th scope="col" class="w-1/3 px-6 py-3 text-center">Pendiente</th>
                        <th scope="col" class="w-1/3 px-6 py-3 text-center">En Proceso</th>
                        <th scope="col" class="w-1/3 px-6 py-3 text-center">Finalizada</th>
                    </tr>
                </thead>
                <tbody class="bg-white dark:bg-gray-900">
                    <tr>
                        <!-- Pendientes -->
                        <td class="droppable align-top" data-state="1" ondrop="drop(event)"
                            ondragover="allowDrop(event)">
                            <div class="flex flex-col items-stretch gap-6">
                                @foreach (var item in Model.Where(t => t.EstadoTarea.Nombre == "Pendiente"))
                                {
                                    <div id="task-@item.Id"
                                        class="task-card border-l-8 draggable-card w-56 cursor-move rounded-lg p-6 text-left shadow-md transition-shadow duration-300 ease-in-out hover:shadow-xl hover:scale-105"
                                        draggable="true" ondragstart="drag(event)" data-id="@item.Id"
                                        style="border-color: @(item.Prioridad.Nombre == "Alta" ? "red" : item.Prioridad.Nombre == "Media" ? "orange" : "green");">
                                        <h2 class="mb-2 flex items-center text-lg font-semibold">
                                            <i class="fas fa-tasks mr-2 text-blue-500"></i> @item.Nombre
                                        </h2>
                                        <p class="mb-2 flex items-center text-sm">
                                            <i class="fas fa-layer-group mr-2 text-green-500"></i>
                                            <strong>Categoría:</strong> @item.Categoria.Nombre
                                        </p>
                                        <p class="flex items-center text-sm">
                                            <i class="fas fa-exclamation-circle mr-2"></i>
                                            <strong>Prioridad:</strong> @item.Prioridad.Nombre
                                        </p>
                                        <p class="mt-2 flex items-center text-sm">
                                            <i class="fas fa-tachometer-alt mr-2 text-purple-500"></i>
                                            <strong>Estado:</strong> @item.EstadoTarea.Nombre
                                        </p>
                                        <p class="mt-1 flex items-center text-sm">
                                            <i class="fas fa-calendar-alt mr-2"></i>
                                            <strong>Fecha de Vencimiento:</strong>
                                            @item.FechaVencimiento.ToShortDateString()
                                        </p>
                                        <button
                                            class="mt-3 flex items-center rounded bg-indigo-500 px-3 py-2 text-sm text-white transition-colors hover:bg-indigo-600">
                                            <i class="fas fa-eye mr-2"></i> Ver más
                                        </button>
                                    </div>
                                }
                            </div>
                        </td>

                        <!-- En Proceso -->
                        <td class="droppable align-top" data-state="2" ondrop="drop(event)"
                            ondragover="allowDrop(event)">
                            <div class="flex flex-col items-stretch gap-6">
                                @foreach (var item in Model.Where(t => t.EstadoTarea.Nombre == "En Proceso"))
                                {
                                    <div id="task-@item.Id"
                                        class="task-card border-l-8 draggable-card w-56 cursor-move rounded-lg p-6 text-left shadow-md transition-shadow duration-300 ease-in-out hover:shadow-xl hover:scale-105"
                                        draggable="true" ondragstart="drag(event)" data-id="@item.Id"
                                        style="border-color: @(item.Prioridad.Nombre == "Alta" ? "red" : item.Prioridad.Nombre == "Media" ? "orange" : "green");">
                                        <h2 class="mb-2 flex items-center text-lg font-semibold">
                                            <i class="fas fa-spinner mr-2 text-yellow-500"></i> @item.Nombre
                                        </h2>
                                        <p class="mb-2 flex items-center text-sm">
                                            <i class="fas fa-layer-group mr-2 text-green-500"></i>
                                            <strong>Categoría:</strong> @item.Categoria.Nombre
                                        </p>
                                        <p class="flex items-center text-sm">
                                            <i class="fas fa-exclamation-circle mr-2"></i>
                                            <strong>Prioridad:</strong> @item.Prioridad.Nombre
                                        </p>
                                        <p class="mt-2 flex items-center text-sm">
                                            <i class="fas fa-tachometer-alt mr-2 text-purple-500"></i>
                                            <strong>Estado:</strong> @item.EstadoTarea.Nombre
                                        </p>
                                        <p class="mt-1 flex items-center text-sm">
                                            <i class="fas fa-calendar-alt mr-2"></i>
                                            <strong>Fecha de Vencimiento:</strong>
                                            @item.FechaVencimiento.ToShortDateString()
                                        </p>
                                        <button
                                            class="mt-3 flex items-center rounded bg-indigo-500 px-3 py-2 text-sm text-white transition-colors hover:bg-indigo-600">
                                            <i class="fas fa-eye mr-2"></i> Ver más
                                        </button>
                                    </div>
                                }
                            </div>
                        </td>

                        <!-- Finalizadas -->
                        <td class="droppable align-top" data-state="3" ondrop="drop(event)"
                            ondragover="allowDrop(event)">
                            <div class="flex flex-col items-stretch gap-6">
                                @foreach (var item in Model.Where(t => t.EstadoTarea.Nombre == "Finalizada"))
                                {
                                    <div id="task-@item.Id"
                                        class="task-card border-l-8 draggable-card w-56 cursor-move rounded-lg p-6 text-left shadow-md transition-shadow duration-300 ease-in-out hover:shadow-xl hover:scale-105"
                                        draggable="true" ondragstart="drag(event)" data-id="@item.Id"
                                        style="border-color: @(item.Prioridad.Nombre == "Alta" ? "red" : item.Prioridad.Nombre == "Media" ? "orange" : "green");">
                                        <h2 class="mb-2 flex items-center text-lg font-semibold">
                                            <i class="fas fa-check-circle mr-2 text-blue-500"></i> @item.Nombre
                                        </h2>
                                        <p class="mb-2 flex items-center text-sm">
                                            <i class="fas fa-layer-group mr-2 text-green-500"></i>
                                            <strong>Categoría:</strong> @item.Categoria.Nombre
                                        </p>
                                        <p class="flex items-center text-sm">
                                            <i class="fas fa-exclamation-circle mr-2"></i>
                                            <strong>Prioridad:</strong> @item.Prioridad.Nombre
                                        </p>
                                        <p class="mt-2 flex items-center text-sm">
                                            <i class="fas fa-tachometer-alt mr-2 text-purple-500"></i>
                                            <strong>Estado:</strong> @item.EstadoTarea.Nombre
                                        </p>
                                        <p class="mt-1 flex items-center text-sm">
                                            <i class="fas fa-calendar-alt mr-2"></i>
                                            <strong>Fecha de Vencimiento:</strong>
                                            @item.FechaVencimiento.ToShortDateString()
                                        </p>
                                        <button
                                            class="mt-3 flex items-center rounded bg-indigo-500 px-3 py-2 text-sm text-white transition-colors hover:bg-indigo-600">
                                            <i class="fas fa-eye mr-2"></i> Ver más
                                        </button>
                                    </div>
                                }
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

    </div>
</div>
    </main>

    <!-- Footer -->
    <footer class="task-footer">
        <div class="task-summary">
            <div class="task-card task-pending">
                <p class="task-card-title">Tareas Pendientes: <span>@Model.Count(t => t.EstadoTarea?.Nombre == "Pendiente")</span></p>
            </div>
            <div class="task-card task-in-progress">
                <p class="task-card-title">Tareas En proceso: <span>@Model.Count(t => t.EstadoTarea?.Nombre == "En Proceso")</span></p>
            </div>
            <div class="task-card task-completed">
                <p class="task-card-title">Tareas Finalizadas: <span>@Model.Count(t => t.EstadoTarea?.Nombre == "Finalizada")</span></p>
            </div>
        </div>
        <button class="task-add-btn">
            <i class="fas fa-plus"></i>
        </button>
    </footer>
</div>



<script>

    document.addEventListener('DOMContentLoaded', function () {
        const draggables = document.querySelectorAll('.draggable-card');
        const containers = document.querySelectorAll('.droppable');
        const messageBox = document.getElementById('message-box');

        function showMessage(message, type) {
            // Actualiza el contenido y el estilo del mensaje
            messageBox.textContent = message;
            messageBox.className = `fixed bottom-4 right-4 p-4 rounded-md text-white ${type === 'success' ? 'bg-green-500' : 'bg-red-500'} transition-opacity duration-300`;
            messageBox.classList.remove('hidden');

            // Oculta el mensaje después de 5 segundos
            setTimeout(() => {
                messageBox.classList.add('hidden');
            }, 5000);
        }

        draggables.forEach(draggable => {
            draggable.addEventListener('dragstart', () => {
                draggable.classList.add('dragging');
            });

            draggable.addEventListener('dragend', () => {
                draggable.classList.remove('dragging');
            });
        });

        containers.forEach(container => {
            container.addEventListener('dragover', e => {
                e.preventDefault();
            });

            container.addEventListener('drop', async e => {
                e.preventDefault();
                const dragging = document.querySelector('.dragging');
                if (dragging) {
                    const newState = container.getAttribute('data-state');
                    const taskId = dragging.getAttribute('data-id');

                    try {
                        const response = await fetch('/Tarea/update-state', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                IdTarea: parseInt(taskId),
                                IdEstadoTarea: parseInt(newState)
                            })
                        });

                        if (response.ok) {
                            const data = await response.json();
                            dragging.setAttribute('data-state', newState);

                            const tabla = dragging.querySelector('.estado');
                            if (tabla) {
                                // Actualiza solo el texto del estado manteniendo el prefijo
                                tabla.innerHTML = `<strong>Estado:</strong> ${data.nombreEstado}`;
                            }
                            const celda = document.querySelectorAll(`.estado[data-id="${taskId}"]`);
                            celda.forEach(cell => {
                                cell.textContent = data.nombreEstado;
                            });

                            showMessage('Tarea actualizada con éxito', 'success');
                            container.appendChild(dragging);

                        } else {
                            showMessage('Error al actualizar la tarea', 'error');
                        }
                    } catch (error) {
                        showMessage('Error de red: ' + error.message, 'error');
                    }

                }
            });
        });
    });

    function toggleView() {
        var tabla = document.getElementById('tabla');
        var tarjetas = document.getElementById('tarjetas');

        if (tabla.classList.contains('hidden')) {
            tabla.classList.remove('hidden');
            tarjetas.classList.add('hidden');
        } else {
            tabla.classList.add('hidden');
            tarjetas.classList.remove('hidden');
        }
    }

    function handleResponse(response, isError = false) {
        // Cerrar el modal y luego mostrar el mensaje
        $('#editModal, #createModal, #deleteModal').modal('hide'); // Asegúrate de incluir todos los IDs de los modales

        if (isError) {
            TempData["ErrorMessage"] = 'Hubo un problema al procesar la solicitud.';
        } else {
            if (response.success) {
                window.location.reload();
                TempData["SuccessMessage"] = response.message;
            } else {
                TempData["ErrorMessage"] = response.message;
            }
        }
    }

    function submitcreateForm(formId) { // Definición de la función para enviar el formulario mediante AJAX
        var formData = $('#' + formId).serialize();  // Recopila los datos del formulario con el ID proporcionado
        $.ajax({ //Solicitud AJAX
            url: '/Tarea/Create', // URL de la acción Create en el controlador Tarea
            type: 'POST',  // Método de la solicitud
            data: formData, // Datos a enviar al servidor (datos del formulario serializados)
            success: function (response) {
                handleResponse(response);
            },
            error: function (xhr, status, error) {
                console.error(xhr.responseText);
                handleResponse(null, true); // Maneja el error general
            }
        });
    }

    function submiteditForm(formId) { // Definición de la función para enviar el formulario mediante AJAX
        var formData = $('#' + formId).serialize(); // Recopila los datos del formulario con el ID proporcionado
        $.ajax({ //Solicitud AJAX
            url: '/Tarea/Edit', // URL de la acción Edit en el controlador Tarea
            type: 'POST', // Método de la solicitud
            data: formData, // Datos a enviar al servidor (datos del formulario serializados)
            success: function (response) {
                handleResponse(response);
            },
            error: function (xhr, status, error) {
                console.error(xhr.responseText);
                handleResponse(null, true); // Maneja el error general
            }
        });
    }

    function eliminarTarea() { // Función para eliminar un Tarea mediante una solicitud AJAX
        $.ajax({ // Enviar una solicitud AJAX para eliminar el Tarea
            url: '/Tarea/Delete', // URL de la acción POST para eliminar la Tarea
            type: 'POST', // Método POST para enviar la solicitud
            data: $("#deleteForm").serialize(), // Serializar los datos del formulario (que incluye el ID de la Tarea)
            success: function (response) {
                handleResponse(response);
            },
            error: function (xhr, status, error) {
                console.error(xhr.responseText);
                handleResponse(null, true); // Maneja el error general
            }
        });
    }

    function cargarVistaCreate(id) {
        // var proyectoId = $("#proyectoId").val(); // Obtener el ID del proyecto desde el elemento HTML
        $.ajax({
            url: "/Tarea/Create/",
            type: "GET",
            data: { idProyecto: id }, // Enviar el ID del proyecto como parte de los datos
            success: function (data) {
                $("#createModalContent").html(data);
                $("#createModal").modal("show");
            }
        });
    }

    function cargarVistaEdit(id) { // Funcion para cargar la vista en un modal
        $.ajax({ //solicitud AJAX para obtener la vista edit
            url: "/Tarea/Edit/" + id, // URL de la vista que se va a cargar
            type: "GET", // Solicitud para obtener la vista
            success: function (data) { // Función a ejecutar si la solicitud AJAX es exitosa
                $("#editModalContent").html(data); // Inserta el contenido HTML recibido en el elemento con ID "editModalContent"
                $("#editModal").modal("show"); // Muestra el modal con ID "editModal" después de cargar la vista
            }
        });
    }

    function cargarVistaDetails(id) { // Funcion para cargar la vista en un modal
        $.ajax({ //solicitud AJAX para obtener la vista details
            url: "/Tarea/Details/" + id, // URL de la vista que se va a cargar
            type: "GET", // Solicitud para obtener la vista
            success: function (data) { // Función a ejecutar si la solicitud AJAX es exitosa
                $("#detailsModalContent").html(data); // Inserta el contenido HTML recibido en el elemento con ID "detailsModalContent"
                $("#detailsModal").modal("show"); // Muestra el modal con ID "detailsModal" después de cargar la vista
            }
        });
    }

    function cargarVistaDelete(id) { // Funcion para cargar la vista en un modal
        $.ajax({ //solicitud AJAX para obtener la vista delete
            url: "/Tarea/Delete/" + id, // URL de la vista que se va a cargar
            type: "GET", // Solicitud para obtener la vista
            success: function (data) { // Función a ejecutar si la solicitud AJAX es exitosa
                $("#deleteModalContent").html(data); // Inserta el contenido HTML recibido en el elemento con ID "deleteModalContent"
                $("#deleteModal").modal("show"); // Muestra el modal con ID "deleteModal" después de cargar la vista
            },
            error: function () { // Función a ejecutar si la solicitud AJAX falla
                alert("Error al cargar la vista de eliminación."); //Se muestra un mensaje de error que no se pudo mostrar el modal
            }
        });
    }

    function confirmExit(idProyecto) {
        Swal.fire({
            title: '¿Estás seguro?',
            text: "¿Deseas salir de este proyecto?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Sí, salir'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '@Url.Action("SalirDeProyecto", "Proyecto")/' + idProyecto;
            }
        });
    }

    function confirmExit() {
        Swal.fire({
            title: '¿Estás seguro?',
            text: "¿Deseas salir de este proyecto?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Sí, salir'
        }).then((result) => {
            if (result.isConfirmed) {
                document.getElementById('exitForm').submit();
            }
        });
    }

    document.addEventListener("DOMContentLoaded", function () {
        const alertContainer = document.getElementById('alertContainer');
        if (alertContainer) {
            // Mostrar la alerta durante 5 segundos
            setTimeout(() => {
                // Desvanecer la alerta
                alertContainer.style.transition = 'opacity 0.5s ease';
                alertContainer.style.opacity = '0';
                // Esperar a que se desvanezca antes de eliminar
                setTimeout(() => alertContainer.remove(), 500);
            }, 4000); // Esperar 4 segundos
        }
    });

</script>