@model IEnumerable<GestordeTaras.EN.Tarea>
@using Microsoft.AspNetCore.Components

@{
    ViewData["Title"] = "Index";
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
}

<div id="alertContainer" class="fixed bottom-4 right-4 z-50">
    @if (TempData["SuccessMessage"] != null)
    {
        <div role="alert"
             class="bg-green-100 dark:bg-green-900 border-l-4 border-green-500 dark:border-green-700 text-green-900 dark:text-green-100 p-2 rounded-lg flex items-center transition duration-300 ease-in-out hover:bg-green-200 dark:hover:bg-green-800 transform hover:scale-105">
            <svg stroke="currentColor"
                 viewBox="0 0 24 24"
                 fill="none"
                 class="h-6 w-6 flex-shrink-0 mr-3 text-green-600"
                 xmlns="http://www.w3.org/2000/svg">
                <path d="M13 16h-1v-4h1m0-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                      stroke-width="2"
                      stroke-linejoin="round"
                      stroke-linecap="round"></path>
            </svg>
            <p class="text-sm font-semibold">@TempData["SuccessMessage"]</p>
        </div>
    }

    else if (TempData["ErrorMessage"] != null)
    {
        <div role="alert"
             class="bg-red-100 dark:bg-red-900 border-l-4 border-red-500 dark:border-red-700 text-red-900 dark:text-red-100 p-2 rounded-lg flex items-center transition duration-300 ease-in-out hover:bg-red-200 dark:hover:bg-red-800 transform hover:scale-105">
            <svg stroke="currentColor"
                 viewBox="0 0 24 24"
                 fill="none"
                 class="h-6 w-6 flex-shrink-0 mr-3 text-red-600"
                 xmlns="http://www.w3.org/2000/svg">
                <path d="M13 16h-1v-4h1m0-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                      stroke-width="2"
                      stroke-linejoin="round"
                      stroke-linecap="round"></path>
            </svg>
            <p class="text-sm font-semibold">@TempData["ErrorMessage"]</p>
        </div>
    }
</div>

<h1 class="text-5xl mb-8 mt-4 font-extrabold dark:text-white">Tareas</h1>

<div class="flex justify-between mb-4">
    @if (Model != null && Model.Any())
    {
        <button onclick="toggleView()" class="btn btn-primary">Cambiar Vista</button>
    }
    @if (User.IsInRole("Colaborador"))
    {
        <form id="exitForm" asp-action="SalirDeProyecto" asp-controller="ProyectoUsuario" method="post">
            <input type="hidden" name="idProyecto" value="@ViewBag.ProyectoId" />
            <button type="button" class="btn btn-danger" onclick="confirmExit()">Salir del Proyecto</button>
        </form>
    }

    @if (User.IsInRole("Administrador") || (User.IsInRole("Colaborador") && ViewBag.EsEncargado))
    {
        <a href="#" class="no-underline hover:no-underline text-white bg-purple-700 hover:bg-purple-800 focus:outline-none focus:ring-4 focus:ring-purple-300 font-medium rounded-full text-lg px-4 py-2 text-center mb-2 dark:bg-purple-600 dark:hover:bg-purple-700 dark:focus:ring-purple-900 inline-flex items-center" onclick="cargarVistaCreate(@ViewBag.ProyectoId)">
            <i class="fas fa-plus-circle mr-2"></i> Nueva Tarea
        </a>
    }

</div>

@if (Model != null && Model.Any())
{
    @if (User.IsInRole("Administrador"))
    {
        <!-- Vista en forma de lista para Administrador -->
        <div id="tabla" class="tabla flex justify-center">
            <div class="relative overflow-x-auto shadow-md sm:rounded-lg mt-4">
                <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-600">
                    <thead class="text-base text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-center">@Html.DisplayNameFor(model => model.Nombre)</th>
                            <th scope="col" class="px-6 py-3 text-center">Categoria</th>
                            <th scope="col" class="px-6 py-3 text-center">Prioridad</th>
                            <th scope="col" class="px-6 py-3 text-center">Estado</th>
                            <th scope="col" class="px-6 py-3">@Html.DisplayNameFor(model => model.FechaVencimiento)</th>
                            <th scope="col" class="px-6 py-3 text-center">elegida por</th>

                            <th scope="col" class="px-6 py-3 text-center">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-700">
                                <td class="px-6 py-4 text-center">@Html.DisplayFor(modelItem => item.Nombre)</td>
                                <td class="px-6 py-4 text-center">@Html.DisplayFor(modelItem => item.Categoria.Nombre)</td>
                                <td class="px-6 py-4 text-center">@Html.DisplayFor(modelItem => item.Prioridad.Nombre)</td>
                                <td class="px-6 py-4 text-center estado" data-id="@item.Id">@Html.DisplayFor(modelItem => item.EstadoTarea.Nombre)</td>
                                <td class="px-6 py-4 text-center">@Html.DisplayFor(modelItem => item.FechaVencimiento)</td>

                                <td class="px-6 py-4 text-center">
                                    @if (item.ElegirTarea != null) // Verifica si la tarea ha sido elegida
                                    {
                                        <img src="@Url.Content(item.ElegirTarea.Usuario.FotoPerfil)"
                                             alt="Foto de perfil"
                                             class="w-8 h-8 rounded-full inline-block mr-2" />
                                        @Html.DisplayFor(modelItem => item.ElegirTarea.Usuario.Nombre)
                                        @Html.DisplayFor(modelItem => item.ElegirTarea.Usuario.Apellido)
                                    }
                                    else
                                    {
                                        <span>No elegida</span>
                                        // Mensaje o contenido alternativo si no ha sido elegida
                                    }
                                </td>

                                <td class="px-6 py-4 flex justify-center items-center space-x-2">
                                    <a href="#" class="btn btn-primary btn-sm flex items-center p-2" onclick="cargarVistaEdit(@item.Id)">
                                        <i class="fas fa-edit text-lg"></i>
                                    </a>
                                    <a href="#" class="btn btn-warning btn-sm flex items-center p-2" onclick="cargarVistaDetails(@item.Id)">
                                        <i class="fas fa-eye text-lg"></i>
                                    </a>
                                    <a href="#" class="btn btn-danger btn-sm flex items-center p-2" onclick="cargarVistaDelete(@item.Id)">
                                        <i class="fas fa-trash-alt text-lg"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {

        <div class="container mx-auto">
            <header id="header1" class="bg-white rounded-lg shadow-lg p-6 mb-8">
                <h1 class="text-3xl font-bold text-gray-800 mb-4">Vista del Proyecto</h1>
                <div class="grid grid-cols-4 gap-4 text-center">
                    <div class="bg-purple-100 rounded-lg p-4">
                        <p class="text-2xl font-bold text-purple-800">@Model.Count()</p>
                        <p class="text-purple-600">Tareas Totales</p>
                    </div>
                    <div class="bg-red-100 rounded-lg p-4">
                        <p class="text-2xl font-bold text-red-800">@Model.Count(t => t.EstadoTarea.Id == 1)</p>
                        <p class="text-red-600">Tareas Pendientes</p>
                    </div>
                    <div class="bg-blue-100 rounded-lg p-4">
                        <p class="text-2xl font-bold text-blue-800">@Model.Count(t => t.EstadoTarea.Id == 2)</p>
                        <p class="text-blue-600">Tareas en Progreso</p>
                    </div>
                    <div class="bg-green-100 rounded-lg p-4">
                        <p class="text-2xl font-bold text-green-800">@Model.Count(t => t.EstadoTarea.Id == 3)</p>
                        <p class="text-green-600">Tareas Completadas</p>
                    </div>
                </div>
            </header>

            <div id="tabla" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                @foreach (var item in Model)
                {
                    <div class="bg-white rounded-lg shadow-md flex flex-col border-l-4 @(item.EstadoTarea.Nombre == "En Progreso" ? "border-l-blue-500" : "border-l-yellow-500") transition-all duration-300 hover:shadow-xl hover:-translate-y-1">
                        <div class="p-4">
                            <div class="flex justify-between items-center">
                                <h2 class="text-xl font-semibold">@item.Nombre</h2>
                                <span class="px-2 py-1 rounded-full text-xs font-semibold @(item.Prioridad.Nombre == "Alta" ? "bg-red-100 text-red-800" : item.Prioridad.Nombre == "Media" ? "bg-yellow-100 text-yellow-800" : "bg-blue-100 text-blue-800")">
                                    @item.Prioridad.Nombre
                                </span>
                            </div>
                        </div>
                        <div class="p-4 flex-grow">
                            <h1 class="text-sm text-gray-600 mb-4">@item.Categoria.Nombre</h1>
                            <div class="flex items-center gap-2 mb-2">
                                <i data-lucide="id-card" class="h-4 w-4 text-indigo-500"></i>
                                <span class="text-sm text-indigo-700">Id : @item.Id</span>
                            </div>
                            <div class="flex items-center gap-2 mb-2">
                                <i data-lucide="calendar-days" class="h-4 w-4 text-indigo-500"></i>
                                <span class="text-sm text-indigo-700">@item.FechaVencimiento.ToString("yyyy-MM-dd")</span>
                            </div>
                            <div class="flex items-center gap-2">
                                <i data-lucide="clock" class="h-4 w-4 text-indigo-500"></i>
                                <span class="text-sm text-indigo-700">Estimado: N/A</span>
                            </div>
                        </div>

                        <div class="p-4 bg-gray-50 rounded-b-lg ">
                            @if (User.IsInRole("Colaborador") && item.EstadoTarea.Nombre == "Pendiente")
                            {
                                <form asp-action="Elegirtarea" method="post">
                                    <input type="hidden" name="IdTarea" value="@item.Id" />
                                    <input type="hidden" name="IdProyecto" value="@item.IdProyecto" />
                                    <button type="submit" class="w-full bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-600 hover:to-indigo-600 text-white py-2 px-4 rounded-full flex items-center justify-center">
                                        <i data-lucide="user" class="mr-2 h-4 w-4"></i>
                                        Elegir esta tarea
                                    </button>
                                </form>
                            }
                            else if (item.ElegirTarea != null && item.ElegirTarea.Usuario != null)
                            {
                                <div class="flex items-center gap-2">
                                    <span>
                                        <img src="@Url.Content(item.ElegirTarea.Usuario.FotoPerfil)"
                                             alt="Foto de perfil"
                                             class="w-8 h-8 rounded-full inline-block mr-2" />
                                        @Html.DisplayFor(modelItem => item.ElegirTarea.Usuario.Nombre)
                                        @Html.DisplayFor(modelItem => item.ElegirTarea.Usuario.Apellido)
                                    </span>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>

    }
}
else
{
    <div class="min-h-screen bg-gradient-to-br from-purple-100 to-indigo-200 p-8 flex flex-col items-center justify-center">
        <img src="~/img/notask.svg" alt="No hay tareas disponibles" class="w-36 h-36 mb-4" />
        <h1 class="text-2xl font-bold text-gray-700">No hay tareas disponibles</h1>
        <p class="mt-2 text-gray-500">Crea una nueva tarea para comenzar a trabajar.</p>
    </div>
}

<script src="https://unpkg.com/lucide@latest"></script>
<script>
    lucide.createIcons();
</script>


<div id="message-box" class="fixed bottom-4 right-4 p-4 rounded-md text-white bg-green-500 hidden">
    <!-- El contenido del mensaje se actualizará desde JavaScript -->
</div>

<div id="tarjetas" class="hidden">
    <!-- Contenido de la vista de tarjetas -->
    <div class="container mx-auto">
        <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-600">
            <thead class="text-base text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                <tr>
                    <th scope="col" class="px-6 py-3 w-1/3 text-center">Pendiente</th>
                    <th scope="col" class="px-6 py-3 w-1/3 text-center">En Proceso</th>
                    <th scope="col" class="px-6 py-3 w-1/3 text-center">Finalizada</th>
                </tr>
            </thead>
            <tbody>
                <!-- Fila de tarjetas -->
                <tr>
                    <td class="p-2 px-0 py-4 droppable" data-state="1">
                        <!-- Área de destino para tareas Pendientes -->
                        <div class="flex flex-col items-center">
                            <div class="flex flex-wrap gap-4 justify-center w-full">
                                @foreach (var item in Model.Where(t => t.EstadoTarea.Nombre == "Pendiente"))
                                {
                                    <div class="bg-gray-100 rounded-lg p-4 shadow-md text-left draggable-card w-56" draggable="true" data-id="@item.Id">
                                        <h2 id="nombre-@item.Id" class="text-lg font-semibold mb-1">@item.Nombre</h2>
                                        <p class="text-xs"><strong>Categoría:</strong> @item.Categoria.Nombre</p>
                                        <p class="text-xs"><strong>Prioridad:</strong> @item.Prioridad.Nombre</p>
                                        <p class="text-xs mt-1 estado"><strong>Estado:</strong> @item.EstadoTarea.Nombre</p>
                                        <p class="text-xs mt-1"><strong>Fecha de Vencimiento:</strong> @item.FechaVencimiento.ToShortDateString()</p>
                                        <button class="mt-2 px-3 py-1 text-xs bg-purple-700 text-white rounded hover:bg-purple-600" onclick="cargarVistaDetails(@item.Id)">Ver más</button>
                                    </div>
                                }
                            </div>
                        </div>
                    </td>
                    <td class="p-2 px-0 py-4 droppable" data-state="2">
                        <!-- Área de destino para tareas En Proceso -->
                        <div class="flex flex-col items-center">
                            <div class="flex flex-wrap gap-4 justify-center w-full">
                                @foreach (var item in Model.Where(t => t.EstadoTarea.Nombre == "En Proceso"))
                                {
                                    <div class="bg-gray-100 rounded-lg p-4 shadow-md text-left draggable-card w-56" draggable="true" data-id="@item.Id">
                                        <h2 id="nombre-@item.Id" class="text-lg font-semibold mb-1">@item.Nombre</h2>
                                        <p class="text-xs"><strong>Categoría:</strong> @item.Categoria.Nombre</p>
                                        <p class="text-xs"><strong>Prioridad:</strong> @item.Prioridad.Nombre</p>
                                        <p class="text-xs mt-1 estado"><strong>Estado:</strong> @item.EstadoTarea.Nombre</p>
                                        <p class="text-xs mt-1"><strong>Fecha de Vencimiento:</strong> @item.FechaVencimiento.ToShortDateString()</p>
                                        <button class="mt-2 px-3 py-1 text-xs bg-purple-700 text-white rounded hover:bg-purple-600" onclick="cargarVistaDetails(@item.Id)">Ver más</button>
                                    </div>
                                }
                            </div>
                        </div>
                    </td>
                    <td class="p-2 px-0 py-4 droppable" data-state="3">
                        <!-- Área de destino para tareas Finalizadas -->
                        <div class="flex flex-col items-center">
                            <div class="flex flex-wrap gap-4 justify-center w-full">
                                @foreach (var item in Model.Where(t => t.EstadoTarea.Nombre == "Finalizada"))
                                {
                                    <div class="bg-gray-100 rounded-lg p-4 shadow-md text-left draggable-card w-56" draggable="true" data-id="@item.Id">
                                        <h2 id="nombre-@item.Id" class="text-lg font-semibold mb-1">@item.Nombre</h2>
                                        <p class="text-xs"><strong>Categoría:</strong> @item.Categoria.Nombre</p>
                                        <p class="text-xs"><strong>Prioridad:</strong> @item.Prioridad.Nombre</p>
                                        <p class="text-xs mt-1 estado"><strong>Estado:</strong> @item.EstadoTarea.Nombre</p>
                                        <p class="text-xs mt-1"><strong>Fecha de Vencimiento:</strong> @item.FechaVencimiento.ToShortDateString()</p>
                                        <button class="mt-2 px-3 py-1 text-xs bg-purple-700 text-white rounded hover:bg-purple-600" onclick="cargarVistaDetails(@item.Id)">Ver más</button>
                                    </div>
                                }
                            </div>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>


<!-- Modales -->
<div class="modal fade" id="createModal" tabindex="-1" role="dialog" aria-labelledby="createModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-purple-700 text-white">
                <h5 class="modal-title" id="createModalLabel">Crear Tarea</h5>
                <button type="button" class="btn-close bg-white text-white" data-bs-dismiss="modal" aria-label="Close">
                </button>
            </div>
            <div class="modal-body">
                <div id="createModalContent">
                    <!-- Contenido de la vista de creación se cargará aquí -->
                </div>
            </div>
            <div class="modal-footer flex justify-center">
                <button type="button" class="btn btn-primary bg-gradient-to-r from-purple-500 via-purple-600 to-purple-700 hover:bg-gradient-to-br focus:ring-2 focus:ring-purple-500 focus:outline-none focus:ring-opacity-50 dark:focus:ring-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2" onclick="submitcreateForm('createForm')">
                    <i class="fas fa-save"></i> Guardar
                </button>
                <button type="button" class="btn btn-secondary bg-gray-300 hover:bg-gray-400 focus:ring-2 focus:ring-gray-500 focus:outline-none focus:ring-opacity-50 dark:focus:ring-gray-800 font-medium rounded-lg text-base px-5 py-2.5 me-2 mb-2" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> Cancelar
                </button>
            </div>


        </div>
    </div>
</div>

<!-- Modal de edición -->
<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-purple-700 text-white">
                <h5 class="modal-title" id="editModalLabel">Editar Tarea</h5>
                <button type="button" class="btn-close bg-white text-white" data-bs-dismiss="modal" aria-label="Close">
                </button>
            </div>
            <div class="modal-body">
                <div id="editModalContent">
                    <!-- Contenido de la vista de edición se cargará aquí -->
                </div>
            </div>
            <div class="modal-footer flex justify-center">
                <button type="button" class="btn btn-primary bg-gradient-to-r from-purple-500 via-purple-600 to-purple-700 hover:bg-gradient-to-br focus:ring-2 focus:ring-purple-500 focus:outline-none focus:ring-opacity-50 dark:focus:ring-purple-800 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2" onclick="submiteditForm('editForm')">
                    <i class="fas fa-save"></i> Guardar
                </button>
                <button type="button" class="btn btn-secondary bg-gray-300 hover:bg-gray-400 focus:ring-2 focus:ring-gray-500 focus:outline-none focus:ring-opacity-50 dark:focus:ring-gray-800 font-medium rounded-lg text-base px-5 py-2.5 me-2 mb-2" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> Cancelar
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal de detalles -->
<div class="modal fade" id="detailsModal" tabindex="-1" role="dialog" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-purple-700 text-white">
                <h5 class="modal-title" id="detailsModalLabel">Detalles de la Tarea</h5>
                <button type="button" class="btn-close bg-white text-white" data-bs-dismiss="modal" aria-label="Close">
                </button>
            </div>
            <div class="modal-body">
                <div id="detailsModalContent">
                    <!-- Contenido de la vista de detalles se cargará aquí -->
                </div>
            </div>
            <div class="modal-footer flex justify-center">
                <button type="button" class="btn btn-secondary bg-gray-300 hover:bg-gray-400 focus:ring-2 focus:ring-gray-500 focus:outline-none focus:ring-opacity-50 dark:focus:ring-gray-800 font-medium rounded-lg text-base px-5 py-2.5 me-2 mb-2" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> Cerrar
                </button>
            </div>
        </div>
    </div>
</div>


<!-- Modal de eliminación -->
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Eliminar Tarea</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                </button>
            </div>
            <div class="modal-body" id="deleteModalContent">
                <!-- Contenido de la vista de eliminación se cargará aquí -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" onclick="eliminarTarea()">Eliminar</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
            </div>
        </div>
    </div>
</div>

<!-- Bootstrap JavaScript -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>


<script>

    document.addEventListener('DOMContentLoaded', function () {
        const draggables = document.querySelectorAll('.draggable-card');
        const containers = document.querySelectorAll('.droppable');
        const messageBox = document.getElementById('message-box');

        function showMessage(message, type) {
            // Actualiza el contenido y el estilo del mensaje
            messageBox.textContent = message;
            messageBox.className = `fixed bottom-4 right-4 p-4 rounded-md text-white ${type === 'success' ? 'bg-green-500' : 'bg-red-500'} transition-opacity duration-300`;
            messageBox.classList.remove('hidden');

            // Oculta el mensaje después de 5 segundos
            setTimeout(() => {
                messageBox.classList.add('hidden');
            }, 5000);
        }

        draggables.forEach(draggable => {
            draggable.addEventListener('dragstart', () => {
                draggable.classList.add('dragging');
            });

            draggable.addEventListener('dragend', () => {
                draggable.classList.remove('dragging');
            });
        });

        containers.forEach(container => {
            container.addEventListener('dragover', e => {
                e.preventDefault();
            });

            container.addEventListener('drop', async e => {
                e.preventDefault();
                const dragging = document.querySelector('.dragging');
                if (dragging) {
                    const newState = container.getAttribute('data-state');
                    const taskId = dragging.getAttribute('data-id');

                    try {
                        const response = await fetch('/Tarea/update-state', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                IdTarea: parseInt(taskId),
                                IdEstadoTarea: parseInt(newState)
                            })
                        });

                        if (response.ok) {
                            const data = await response.json();
                            dragging.setAttribute('data-state', newState);

                            const tabla = dragging.querySelector('.estado');
                            if (tabla) {
                                // Actualiza solo el texto del estado manteniendo el prefijo
                                tabla.innerHTML = `<strong>Estado:</strong> ${data.nombreEstado}`;
                            }
                            const celda = document.querySelectorAll(`.estado[data-id="${taskId}"]`);
                            celda.forEach(cell => {
                                cell.textContent = data.nombreEstado;
                            });

                            showMessage('Tarea actualizada con éxito', 'success');
                            container.appendChild(dragging);

                        } else {
                            showMessage('Error al actualizar la tarea', 'error');
                        }
                    } catch (error) {
                        showMessage('Error de red: ' + error.message, 'error');
                    }

                }
            });
        });
    });

    function toggleView() {
        const header1 = document.getElementById("header1");
        const tabla = document.getElementById("tabla");
        const tarjetas = document.getElementById("tarjetas");

        // Alternar entre tabla y tarjetas, y mostrar/ocultar header1
        if (tabla.classList.contains("hidden")) {
            tabla.classList.remove("hidden");
            tarjetas.classList.add("hidden");
            header1.classList.remove("hidden"); // Mostrar el header en vista de tabla
        } else {
            tabla.classList.add("hidden");
            tarjetas.classList.remove("hidden");
            header1.classList.add("hidden"); // Ocultar el header en vista de tarjetas
        }
    }


    function handleResponse(response, isError = false) {
        // Cerrar el modal y luego mostrar el mensaje
        $('#editModal, #createModal, #deleteModal').modal('hide'); // Asegúrate de incluir todos los IDs de los modales

        if (isError) {
            TempData["ErrorMessage"] = 'Hubo un problema al procesar la solicitud.';
        } else {
            if (response.success) {
                window.location.reload();
                TempData["SuccessMessage"] = response.message;
            } else {
                TempData["ErrorMessage"] = response.message;
            }
        }
    }

    function submitcreateForm(formId) { // Definición de la función para enviar el formulario mediante AJAX
        var formData = $('#' + formId).serialize();  // Recopila los datos del formulario con el ID proporcionado
        $.ajax({ //Solicitud AJAX
            url: '/Tarea/Create', // URL de la acción Create en el controlador Tarea
            type: 'POST',  // Método de la solicitud
            data: formData, // Datos a enviar al servidor (datos del formulario serializados)
            success: function (response) {
                handleResponse(response);
            },
            error: function (xhr, status, error) {
                console.error(xhr.responseText);
                handleResponse(null, true); // Maneja el error general
            }
        });
    }

    function submiteditForm(formId) { // Definición de la función para enviar el formulario mediante AJAX
        var formData = $('#' + formId).serialize(); // Recopila los datos del formulario con el ID proporcionado
        $.ajax({ //Solicitud AJAX
            url: '/Tarea/Edit', // URL de la acción Edit en el controlador Tarea
            type: 'POST', // Método de la solicitud
            data: formData, // Datos a enviar al servidor (datos del formulario serializados)
            success: function (response) {
                handleResponse(response);
            },
            error: function (xhr, status, error) {
                console.error(xhr.responseText);
                handleResponse(null, true); // Maneja el error general
            }
        });
    }

    function eliminarTarea() { // Función para eliminar un Tarea mediante una solicitud AJAX
        $.ajax({ // Enviar una solicitud AJAX para eliminar el Tarea
            url: '/Tarea/Delete', // URL de la acción POST para eliminar la Tarea
            type: 'POST', // Método POST para enviar la solicitud
            data: $("#deleteForm").serialize(), // Serializar los datos del formulario (que incluye el ID de la Tarea)
            success: function (response) {
                handleResponse(response);
            },
            error: function (xhr, status, error) {
                console.error(xhr.responseText);
                handleResponse(null, true); // Maneja el error general
            }
        });
    }

    function cargarVistaCreate(id) {
        // var proyectoId = $("#proyectoId").val(); // Obtener el ID del proyecto desde el elemento HTML
        $.ajax({
            url: "/Tarea/Create/",
            type: "GET",
            data: { idProyecto: id }, // Enviar el ID del proyecto como parte de los datos
            success: function (data) {
                $("#createModalContent").html(data);
                $("#createModal").modal("show");
            }
        });
    }

    function cargarVistaEdit(id) { // Funcion para cargar la vista en un modal
        $.ajax({ //solicitud AJAX para obtener la vista edit
            url: "/Tarea/Edit/" + id, // URL de la vista que se va a cargar
            type: "GET", // Solicitud para obtener la vista
            success: function (data) { // Función a ejecutar si la solicitud AJAX es exitosa
                $("#editModalContent").html(data); // Inserta el contenido HTML recibido en el elemento con ID "editModalContent"
                $("#editModal").modal("show"); // Muestra el modal con ID "editModal" después de cargar la vista
            }
        });
    }

    function cargarVistaDetails(id) { // Funcion para cargar la vista en un modal
        $.ajax({ //solicitud AJAX para obtener la vista details
            url: "/Tarea/Details/" + id, // URL de la vista que se va a cargar
            type: "GET", // Solicitud para obtener la vista
            success: function (data) { // Función a ejecutar si la solicitud AJAX es exitosa
                $("#detailsModalContent").html(data); // Inserta el contenido HTML recibido en el elemento con ID "detailsModalContent"
                $("#detailsModal").modal("show"); // Muestra el modal con ID "detailsModal" después de cargar la vista
            }
        });
    }

    function cargarVistaDelete(id) { // Funcion para cargar la vista en un modal
        $.ajax({ //solicitud AJAX para obtener la vista delete
            url: "/Tarea/Delete/" + id, // URL de la vista que se va a cargar
            type: "GET", // Solicitud para obtener la vista
            success: function (data) { // Función a ejecutar si la solicitud AJAX es exitosa
                $("#deleteModalContent").html(data); // Inserta el contenido HTML recibido en el elemento con ID "deleteModalContent"
                $("#deleteModal").modal("show"); // Muestra el modal con ID "deleteModal" después de cargar la vista
            },
            error: function () { // Función a ejecutar si la solicitud AJAX falla
                alert("Error al cargar la vista de eliminación."); //Se muestra un mensaje de error que no se pudo mostrar el modal
            }
        });
    }

    function confirmExit(idProyecto) {
        Swal.fire({
            title: '¿Estás seguro?',
            text: "¿Deseas salir de este proyecto?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Sí, salir'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '@Url.Action("SalirDeProyecto", "Proyecto")/' + idProyecto;
            }
        });
    }

    function confirmExit() {
        Swal.fire({
            title: '¿Estás seguro?',
            text: "¿Deseas salir de este proyecto?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Sí, salir'
        }).then((result) => {
            if (result.isConfirmed) {
                document.getElementById('exitForm').submit();
            }
        });
    }

    document.addEventListener("DOMContentLoaded", function () {
        const alertContainer = document.getElementById('alertContainer');
        if (alertContainer) {
            // Mostrar la alerta durante 5 segundos
            setTimeout(() => {
                // Desvanecer la alerta
                alertContainer.style.transition = 'opacity 0.5s ease';
                alertContainer.style.opacity = '0';
                // Esperar a que se desvanezca antes de eliminar
                setTimeout(() => alertContainer.remove(), 500);
            }, 4000); // Esperar 4 segundos
        }
    });

</script>